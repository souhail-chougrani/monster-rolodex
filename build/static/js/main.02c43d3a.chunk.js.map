{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-input/Search-input.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","m","SearchInput","placeholder","onSearch","searchedValue","type","onChange","value","App","state","searchField","handleSearch","event","target","setState","fetch","req","json","jsonResp","this","monstersFiltred","filter","includes","console","log","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sUAYeA,MAVf,SAAcC,GACV,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,KAClF,mCAAML,EAAMG,QAAQG,QACpB,qCAAQN,EAAMG,QAAQI,a,MCMjBC,MAVf,SAAkBR,GACd,OACI,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACC,GAAD,OACpB,cAAC,EAAD,CAAkBR,QAASQ,GAAhBA,EAAEP,UCQRQ,MAbf,YAA4D,IAAtCC,EAAqC,EAArCA,YAAYC,EAAyB,EAAzBA,SAASC,EAAgB,EAAhBA,cACvC,OACI,8BACA,uBACEC,KAAK,SACLH,YAAaA,EACbI,SAAUH,EACVI,MAAOH,OC8BFI,E,4MAlCbC,MAAQ,CACNX,SAAU,GACVY,YAAa,I,EAOfC,aAAe,SAACC,GACd,IAAMF,EAAcE,EAAMC,OAAON,MACjC,EAAKO,SAAS,CAAEJ,iB,oMANEK,MAAM,8C,cAAlBC,E,gBACiBA,EAAIC,O,OAArBC,E,OACNC,KAAKL,SAAS,CAAEhB,SAAUoB,I,qIAOlB,IAAD,EAC2BC,KAAKV,MAA/BX,EADD,EACCA,SAAUY,EADX,EACWA,YACZU,EAAkBV,EACpBZ,EAASuB,QAAO,SAACrB,GAAD,OAAOA,EAAEL,KAAK2B,SAASZ,MACvCZ,EAEJ,OADAyB,QAAQC,IAAIJ,GAEV,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEa,SAAUgB,KAAKR,aACfT,YAAY,iBACZE,cAAee,KAAKV,MAAMC,cAE5B,cAAC,EAAD,CAAUZ,SAAUsB,W,GA7BVK,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.02c43d3a.chunk.js","sourcesContent":["import React from 'react'\r\nimport   \"./card.style.css\";\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"\" />\r\n          <h2> {props.monster.name}</h2> \r\n          <span> {props.monster.email}</span> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport Card from '../card/card.component';\r\nimport './card-list.style.css'\r\nfunction CardList(props) {\r\n    return (\r\n        <div className=\"card-list\">\r\n          {props.monsters.map((m) => (\r\n          <Card key={m.id}  monster={m}/>\r\n          ))}        \r\n          </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\n\r\nfunction SearchInput({placeholder,onSearch,searchedValue}) {\r\n    return (\r\n        <div>\r\n        <input\r\n          type=\"search\"\r\n          placeholder={placeholder}\r\n          onChange={onSearch}\r\n          value={searchedValue}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchInput\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchInput from \"./components/search-input/Search-input.component\";\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchField: \"\",\n  };\n  async componentDidMount() {\n    const req = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const jsonResp = await req.json();\n    this.setState({ monsters: jsonResp });\n  }\n  handleSearch = (event) => {\n    const searchField = event.target.value;\n    this.setState({ searchField });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const monstersFiltred = searchField\n      ? monsters.filter((m) => m.name.includes(searchField))\n      : monsters;\n    console.log(monstersFiltred);\n    return (\n      <div className=\"App\">\n        <h1>Monsters rolodex</h1>\n        <SearchInput\n          onSearch={this.handleSearch}\n          placeholder=\"search monster\"\n          searchedValue={this.state.searchField}\n        />\n        <CardList monsters={monstersFiltred}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}